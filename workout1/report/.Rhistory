knitr::include_graphics('../images/gsw-shot-charts.png')
library(dplyr)
shots <- read.csv(file = "../data/shots-data.csv",stringsAsFactors = FALSE)
PT2_shots <- shots %>%
filter(shot_type == "2PT Field Goal") %>%
group_by(name) %>%
summarize(total = n(), made = length(shot_type[shot_made_flag =="shot_yes"])) %>%
mutate(perc_made = made / total) %>%
arrange(desc(perc_made))
PT2_shots
PT3_shots <- shots %>%
filter(shot_type == "3PT Field Goal") %>%
group_by(name) %>%
summarize(total = n(), made = length(shot_type[shot_made_flag =="shot_yes"])) %>%
mutate(perc_made = made / total) %>%
arrange(desc(perc_made))
PT3_shots
effective_shots <- shots %>%
group_by(name) %>%
summarize(total = n(), made = length(shot_type[shot_made_flag =="shot_yes"])) %>%
mutate(perc_made = made / total) %>%
arrange(desc(perc_made))
effective_shots
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#' @title Area of a circle
#' @description calculates the area of a circle
#' @param radius radius of the circlr (numeric)
#' @return computed area
circle_area() <- function(radius = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
area <- pi * radius^2
return(area)
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
```{r}
```{r}
```{r}
#' @title Area of a circle
#' @description calculates the area of a circle
#' @param radius radius of the circlr (numeric)
#' @return computed area
circle_area <- function(radius = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
area <- pi * radius^2
return(area)
}
#' @title Area of a circle
#' @description calculates the area of a circle
#' @param radius radius of the circlr (numeric)
#' @return computed area
circle_area <- function(radius = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
area <- pi * radius^2
return(area)
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
#' @title Surface area of a cylinder
#' @description compute the area of a cylinder
#' @param radius radius of the circlr (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the area of a cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
area <- 2 * pi * r * h + 2 * circle_area()
return(area)
}
cylinder_area()
#' @title Surface area of a cylinder
#' @description compute the area of a cylinder
#' @param radius radius of the circlr (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the area of a cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
area <- 2 * pi * radius * h + 2 * circle_area()
return(area)
}
cylinder_area()
#' @title Surface area of a cylinder
#' @description compute the area of a cylinder
#' @param radius radius of the circlr (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the area of a cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
area <- 2 * pi * radius * height + 2 * circle_area()
return(area)
}
cylinder_area()
#' @title Surface area of a cylinder
#' @description compute the area of a cylinder
#' @param radius radius of the circlr (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the area of a cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
area <- 2 * pi * radius * height + 2 * circle_area()
return(area)
}
cylinder_area()
cylinder_area(radius = 2, height = 3)
cylinder_area(radius = -2, height = 1)
#' @title Surface area of a cylinder
#' @description compute the area of a cylinder
#' @param radius radius of the circlr (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the area of a cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
area <- 2 * pi * radius * height + 2 * circle_area()
return(area)
}
cylinder_area()
cylinder_area(radius = 2, height = 3)
cylinder_area(radius = -2, height = 1)
cylinder_area(radius = 2, height = -1)
cylinder_area(radius = -2, height = -1)
#' @title Volume of a cylinder
#' @description compute the volume of a cylinder
#' @param radius radius of the cylinder (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the volume of a cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
volume <- height * circle_area()
return(volume)
}
cylinder_volume()
#' @title Volume of a cylinder
#' @description compute the volume of a cylinder
#' @param radius radius of the cylinder (numeric)
#' @param height heights of the cylinder (numeric)
#' @return compute the volume of a cylinder
cylinder_volume <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
if (height < 0) {
stop("height cannot be negative")
}
volume <- height * circle_area()
return(volume)
}
cylinder_volume()
cylinder_volume(radius = 3, height = 10)
cylinder_volume(height = 10, radius = 3)
is_even <- function(x) {
if (typeof(x) != "double") {
print("NA")
} else if (x %% 2 == 0) {
print("TRUE")
} else {
print("FALSE")
}
}
is_even <- function(x) {
if (typeof(x) != "double") {
print("NA")
} else if (x %% 2 == 0) {
print("TRUE")
} else {
print("FALSE")
}
}
is_even(10)
is_even <- function(x) {
if (typeof(x) != "double") {
print("NA")
} else if (x %% 2 == 0) {
print("TRUE")
} else {
print("FALSE")
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_even <- function(x) {
if (typeof(x) != "double") {
print("NA")
} else if (x %% 2 == 0) {
print(TRUE)
} else {
print("FALSE")
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_even <- function(x) {
if (typeof(x) != "double") {
print(NA)
} else if (x %% 2 == 0) {
print(TRUE)
} else {
print(FALSE)
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_odd <- function(x){
print(!is_even())
}
is_odd <- function(x){
print(!is_even())
}
# odd number
is_odd(1)
is_odd <- function(x){
print(!is_even(x))
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd <- function(x){
print(!is_even(x))
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
# a grading function
grage <- function(score){
if (score >= 90 & score < 100) {
print('A')
} else if (score >= 80) {
print('B')
} else if (score >= 70) {
print('C')
} else if (score >= 60) {
print('D')
} else if (score < 60) {
print('F')
}
}
# grade "A"
grade(score = 90)
# a grading function
grade <- function(score){
if (score >= 90 & score < 100) {
print('A')
} else if (score >= 80) {
print('B')
} else if (score >= 70) {
print('C')
} else if (score >= 60) {
print('D')
} else if (score < 60) {
print('F')
}
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
# a grading function
grade <- function(score){
if (score < 0 | score > 100) {
stop("score must be a number between 0 and 100")
} else if (score >= 90 & score < 100) {
print('A')
} else if (score >= 80) {
print('B')
} else if (score >= 70) {
print('C')
} else if (score >= 60) {
print('D')
} else if (score < 60) {
print('F')
}
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
fog <- function(x) {
f (g(x))
}
gof <- function(x) {
g (f(x))
}
fog(2)     # 81
#' @title square
#' @description calculates the square of a number
#' @param x number (numeric)
#' @return x*x
f <- function(x) {
x^2
}
f(2)
f(-5)
#' @title mathematical function g(x) = 2x + 5
#' @description calculates 2x + 5
#' @param x number (numeric)
#' @return 2x + 5
g <- function(x) {
2*x + 5
}
g(0)
g(-5/2)
fog <- function(x) {
f (g(x))
}
gof <- function(x) {
g (f(x))
}
fog(2)     # 81
fog(-5)    # 25
gof(0)     # 5
gof(-5/2)  # 17.5
pythagoras <- function(a , b) {
sqrt(a^2 + b^2)
}
pythagoras <- function(a , b) {
sqrt(a^2 + b^2)
}
pythagoras(3, 4)
pythagoras <- function(a , b) {
sqrt(a^2 + b^2)
}
pythagoras(3, 4)
pythagoras <- function(a) {
sqrt(a^2 + a^2)
}
pythagoras(5)
is_odd <- function(x){
!is_even(x)
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd <- function(x){
return (!is_even(x))
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd <- function(x){
!is_even(x)
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_even <- function(x) {
if (typeof(x) != "double") {
return(NA)
} else if (x %% 2 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_odd <- function(x){
!is_even(x)
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
